{{!-- imports --}}
{{> unauthenticated/search/helpers-js }}

{{!-- template --}}
<div id="search-results" :class="{ active: !isLoading }">
  <div class="search-header">
    <h1>${ searchResults.length } results for "${ searchModel }"</h1>
  </div>
  <div class="search-item-container expanded">
    <div class="search-row item" v-for="file in activeResults" @click="goToPage(file.path)">
      <h6 class="title">${ file.alias || file.title }</h6>
      <p class="url">${ buildUrl(file.path) }</p>
    </div>
  </div>
  <div class="pagination" v-if="searchResults.length > resultsPerPage">
    <button @click="rotatePagination(-1)" class="previous-item" :class="{ active: activePageIdx > 0 }">
      ${ "< Back" } </button> <button @click="goToPagination(idx)" class="pagination-item" :class="{ active: activePageIdx === idx }" v-for="item, idx in Object.keys(paginatedResults)">
        ${ idx + 1 }
    </button>
    <button @click="rotatePagination(1)" class="next-item" :class="{ active: activePageIdx < activeResults.length }">
      ${ "Next >" }
    </button>
  </div>
</div>

{{!-- component --}}
<script>
  "use strict";

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }
    return _typeof(obj);
  }

  window.registerApp(function() {
    new Vue({
      el: '#search-results',
      delimiters: ['${', '}'],
      data: function data() {
        return {
          pageList: [],
          searchModel: '',
          searchResults: [],
          isLoading: true,
          paginatedResults: {},
          activeResults: [],
          activePageIdx: 0,
          resultsPerPage: 6,
          getUrlParameter: function getUrlParameter() {
            console.log('error: getUrlParameter helper failed to load');
          },
          fetchPageList: function fetchPageList() {
            console.log('error: fetchPageList helper failed to load');
          },
          searchFiles: function searchFiles() {
            console.log('error: searchFiles helper failed to load');
          },
          goToPage: function goToPage() {
            console.log('error: goToPage helper failed to load');
          },
          buildUrl: function buildUrl() {
            console.log('error: buildUrl helper failed to load');
          }
        };
      },
      mounted: function mounted() {
        var _this = this;

        if (window.helpers) {
          this.getUrlParameter = window.helpers.getUrlParameter || this.getUrlParameter;
          this.fetchPageList = window.helpers.fetchPageList || this.fetchPageList;
          this.searchFiles = window.helpers.searchFiles || this.searchFiles;
          this.goToPage = window.helpers.goToPage || this.goToPage;
          this.buildUrl = window.helpers.buildUrl || this.buildUrl;
        }

        this.isLoading = true;
        this.getFiles().then(function(resp) {
          _this.pageList = _this.fetchPageList(resp.data.data);
          _this.searchModel = _this.getUrlParameter('query');
          _this.searchResults = _this.searchFiles(_this.searchModel, _this.pageList);
          _this.paginatedResults = _this.getPaginatedResults();
          _this.activeResults = _this.getActiveResults();
          _this.isLoading = false;
        });
      },
      methods: {
        getFiles: function getFiles() {
          return window._kong.api.get('/files', {
            withCredentials: true
          });
        },
        isPageActive: function isPageActive(idx) {
          return this.activePageIdx === idx;
        },
        toggleActive: function toggleActive(isActive) {
          if (_typeof(isActive) === Boolean) {
            this.searchActive = isActive;
            return;
          }

          this.searchActive = !this.searchActive;
        },
        toggleSearchFocus: function toggleSearchFocus(isFocused) {
          if (_typeof(isFocused) === Boolean) {
            this.searchFocused = isFocused;
            return;
          }

          this.searchFocused = !this.searchFocused;
        },
        goToPagination: function goToPagination(idx) {
          this.activePageIdx = idx;
        },
        rotatePagination: function rotatePagination(rotation) {
          var maxIdx = Object.keys(this.paginatedResults).length - 1;
          var minIdx = 0;

          if (rotation === 1 && this.activePageIdx < maxIdx) {
            this.activePageIdx += 1;
          } else if (rotation === -1 && this.activePageIdx > minIdx) {
            this.activePageIdx -= 1;
          }
        },
        getPaginatedResults: function getPaginatedResults() {
          var count = 0;
          var pageIdx = 0;
          var paginatedResults = {};

          if (!this.searchResults.length) {
            return {
              0: []
            };
          }

          for (pageIdx = 0; this.searchResults.length > count; pageIdx++) {
            paginatedResults[pageIdx] = [];

            for (var k = 0; k < this.resultsPerPage; k++) {
              if (this.searchResults[count]) {
                paginatedResults[pageIdx].push(this.searchResults[count]);
              }

              count += 1;
            }
          }

          return paginatedResults;
        },
        getActiveResults: function getActiveResults() {
          return this.paginatedResults[this.activePageIdx];
        }
      },
      watch: {
        activePageIdx: {
          handler: function handler() {
            this.activeResults = this.getActiveResults();
          }
        }
      }
    });
  });
</script>

{{!-- style --}}
<style>
  #search-results:not(.active) {
    display: none;
  }

  #search-results {
    padding: 0 183px;
  }

  #search-results .search-header {
    width: 100%;
    border-bottom: 1px solid rgba(0, 0, 0, 0.10);
    padding: 26px 0;
    display: flex;
    align-content: center;
    align-items: center;
    justify-content: space-between;
  }

  #search-results .search-header input {
    border-width: 0;
    font-size: 16px;
    color: rgba(0, 0, 0, 0.45);
    letter-spacing: 0;
    text-align: left;
    flex-grow: 1;
    flex-shrink: 0;
    flex-direction: row;
  }

  #search-results .pagination {
    display: flex;
    flex-direction: row;
    align-items: center;
    margin-top: 32px;
  }

  #search-results button:focus {
    outline: none;
  }

  #search-results .pagination-item {
    color: rgba(0, 0, 0, 0.45);
  }

  #search-results .pagination-item.active {
    color: rgba(0, 0, 0, 0.70);
  }


  #search-results .next-item,
  #search-results .previous-item {
    color: #B3B3B3;
    cursor: default;
  }

  #search-results .next-item.active,
  #search-results .previous-item.active {
    color: #0D93F2;
    cursor: pointer;
  }

  #search-results .search-header h1 {
    font-size: 38px;
    color: rgba(0, 0, 0, 0.85);
    letter-spacing: 0;
    text-align: left;
    line-height: 42.75px;
  }

  #search-results .search-header svg {
    fill: #8294A1;
  }

  #search-results .search-row {
    padding: 22px 32px;
    cursor: pointer;
  }

  #search-results .search-row.item:hover {
    background-color: #EDF5FA
  }

  #search-results .search-row.overflow:hover a {
    text-decoration: underline;
  }

  #search-results .search-row.item {
    border-bottom: 1px solid rgba(0, 0, 0, 0.10);
  }

  #search-results .search-row.item h6 {
    font-size: 16px;
    margin: 0 0 10px;
    color: rgba(0, 0, 0, 0.70);
    letter-spacing: 0;
    text-align: left;
  }

  #search-results .search-row.item p {
    font-size: 14px;
    margin: 0;
    color: rgba(0, 0, 0, 0.45);
  }

  @media all and (max-width: 720px) {
    #search-results {
      padding: 0 24px;
    }

    #search-results .search-header {
      padding: 26px 32px;
    }

    #search-results .search-header h1 {
      font-size: 24px;
    }
  }

  @media all and (max-width: 500px) {
    #search-results {
      padding: 0;
    }
  }
</style>