{{!-- imports --}}
{{> spec/helpers-js }}

{{!-- template --}}
<div class="spec sidebar-list" id="spec-sidebar-list" v-if="sidebarData.length">
  <ul :class="{ active: !isLoading }">
    <li class="list-title">Resources</li>
    <li
      v-for="sidebarItem in sidebarData"
      class="submenu"
      :class="{ active: isTagActive(sidebarItem.tag) }">
      <span class="submenu-title" @click="subMenuClicked(sidebarItem)">${ sidebarItem.tag }</span>
      <ul class="submenu-items">
        <div v-for="path in sidebarItem.paths">
          <div v-for="method in path.methods">
            <li class="method" :class="{ active: isIdActive(method.id) }">
              <a
                @click="sidebarAnchorClicked(sidebarItem, method)"
                :class="linkMethod(method)"
                :title="method.summary">
                ${method.summary}
              </a>
            </li>
          </div>
        </div>
      </ul>
    </li>
  </ul>
</div>

{{!-- component --}}
<script>

"use strict";

window.registerApp(function () {
  new window.Vue({
    el: '#spec-sidebar-list',
    delimiters: ['${', '}'],
    data: function data() {
      return {
        specName: window._kong.spec.name,
        spec: window._kong.spec,
        sidebarData: [],
        activeTags: [],
        activeId: null,
        isLoading: true,
        buildSidebar: function buildSidebar() {
          console.log('error: buildSidebar helper failed to load');
        },
        retrieveParsedSpec: function retrieveParsedSpec() {
          console.log('error: retrieveParsedSpec helper failed to load');
        }
      };
    },
    mounted: function mounted() {
      if (window.helpers) {
        this.buildSidebar = window.helpers.buildSidebar || this.buildSidebar;
        this.retrieveParsedSpec = window.helpers.retrieveParsedSpec || this.retrieveParsedSpec;
        var spec = this.retrieveParsedSpec(this.specName, this.spec);
        var builtSpec = this.buildSidebar(spec);
        this.sidebarData = builtSpec;
        this.isLoading = false;
      }
    },
    methods: {
      moveToAnchor: function moveToAnchor(destination) {
        window.scrollTo(0, destination.offsetTop - 120);
      },
      isIdActive: function isIdActive(id) {
        return this.activeId === id;
      },
      isTagActive: function isTagActive(tag) {
        return this.activeTags.includes(tag);
      },
      sidebarAnchorClicked: function sidebarAnchorClicked(sidebarItem, method) {
        this.activeTags.push(sidebarItem.tag);
        this.activeId = method.id;
        var anchorPath = "operations-".concat(sidebarItem.tag, "-").concat(method.id);
        anchorPath = anchorPath.replace(/ /g,"_")
        window.location.hash = anchorPath;
        var anchor = document.querySelector("#".concat(anchorPath));
        this.moveToAnchor(anchor);
      },
      subMenuClicked: function subMenuClicked(sidebarItem) {
        if (this.isTagActive(sidebarItem.tag)) {
          this.activeTags = this.activeTags.filter(function (activeTag) {
            return activeTag !== sidebarItem.tag;
          });
          return;
        }

        this.activeTags.push(sidebarItem.tag);
      },
      linkMethod: function linkMethod(method) {
        var classes = {};
        classes["method-" + method.method] = true;
        return classes;
      }
    }
  });
});

</script>

{{!-- style --}}
<style>
  #spec-sidebar-list > ul:not(.active) {
    display: none;
  }
</style>
