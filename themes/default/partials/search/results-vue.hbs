{{!-- imports --}}
{{> search/helpers-js }}

{{!-- template --}}
<div id="search-results" :class="{ active: !isLoading }">
  <div class="search-header">
    <h1>${ searchResults.length } results for "${ searchModel }"</h1>
  </div>
  <div class="search-item-container expanded">
    <div class="search-row item"
      v-for="file in activeResults"
      @click="goToPage(file.path)">
      <h6 class="title">${ file.alias || file.title }</h6>
      <p class="url">${ buildUrl(file.path) }</p>
    </div>
  </div>
  <div class="pagination" v-if="searchResults.length > resultsPerPage">
    <button
      @click="rotatePagination(-1)"
      class="previous-item"
      :class="{ active: activePageIdx > 0 }">
      ${ "< Back" }
    </button>
    <button
      @click="goToPagination(idx)"
      class="pagination-item"
      :class="{ active: activePageIdx === idx }"
      v-for="item, idx in paginatedResults">
      ${ idx + 1 }
    </button>
    <button
      @click="rotatePagination(1)"
      class="next-item"
      :class="{ active: !!paginatedResults[activePageIdx + 1] }">
      ${ "Next >" }
    </button>
  </div>
</div>

{{!-- component --}}
<script>
window.registerApp(function () {

  new Vue({
    el: '#search-results',
    delimiters: ['${', '}'],

    data () {
      return {
        pageList: [],
        searchModel: '',
        searchResults: [],
        isLoading: true,

        paginatedResults: [],
        activeResults: [],
        activePageIdx: 0,
        resultsPerPage: 6,

        getUrlParameter: () => { console.log('error: getUrlParameter helper failed to load') },
        fetchPageList: () => { console.log('error: fetchPageList helper failed to load') },
        searchFiles: () => { console.log('error: searchFiles helper failed to load') },
        goToPage: () => { console.log('error: goToPage helper failed to load') },
        buildUrl: () => { console.log('error: buildUrl helper failed to load') }
      }
    },

    mounted () {
      if (window.helpers) {
        this.getUrlParameter = window.helpers.getUrlParameter || this.getUrlParameter
        this.fetchPageList = window.helpers.fetchPageList || this.fetchPageList
        this.searchFiles = window.helpers.searchFiles || this.searchFiles
        this.goToPage = window.helpers.goToPage || this.goToPage
        this.buildUrl = window.helpers.buildUrl || this.buildUrl
      }
      this.isLoading = true
      this.getFiles().then((resp) => {
        this.pageList = this.fetchPageList(resp.data.data)
        this.searchModel = this.getUrlParameter('query')
        this.searchResults = this.searchFiles(this.searchModel, this.pageList)
        this.paginatedResults = this.getPaginatedResults()
        this.activeResults = this.getActiveResults()
        this.isLoading = false
      })
    },

    methods: {
      getFiles () {
        return window._kong.api.get('/files', { withCredentials: true })
      },

      isPageActive (idx) {
        return this.activePageIdx === idx
      },

      toggleActive (isActive) {
        if (typeof isActive === Boolean) {
          this.searchActive = isActive
          return
        }
        this.searchActive = !this.searchActive
      },

      toggleSearchFocus (isFocused) {
        if (typeof isFocused === Boolean) {
          this.searchFocused = isFocused
          return
        }
        this.searchFocused = !this.searchFocused
      },

      goToPagination (idx) {
        this.activePageIdx = idx
      },

      rotatePagination (rotation) {
        let maxIdx = this.paginatedResults.length - 1
        let minIdx = 0

        if (rotation === 1 && (this.activePageIdx < maxIdx)) {
          this.activePageIdx += 1
        } else if (rotation === -1 && this.activePageIdx > minIdx) {
          this.activePageIdx -= 1
        }
      },

      getPaginatedResults () {
        return this.searchResults.reduce((paginatedRes, currentSearchRes) => {
          // Start a new page if current page has reached max results per page.
          if (paginatedRes[paginatedRes.length - 1].length === this.resultsPerPage) {
            paginatedRes.push([])
          }

          // Add current search result to current page.
          paginatedRes[paginatedRes.length - 1].push(currentSearchRes)

          return paginatedRes
        },[[]])
      },

      getActiveResults () {
        return this.paginatedResults[this.activePageIdx]
      }
    },

    watch: {
      activePageIdx: {
        handler: function() {
          this.activeResults = this.getActiveResults()
        }
      }
    }
  })
})
</script>

{{!-- style --}}
<style>

#search-results:not(.active) {
  display: none;
}

#search-results {
  padding: 0 183px;
}

#search-results .search-header {
  width: 100%;
  border-bottom: 1px solid rgba(0,0,0,0.10);
  padding: 26px 0;
  display: flex;
  align-content: center;
  align-items: center;
  justify-content: space-between;
}

#search-results .search-header input {
  border-width: 0;
  font-size: 16px;
  color: rgba(0,0,0,0.45);
  letter-spacing: 0;
  text-align: left;
  flex-grow: 1;
  flex-shrink: 0;
  flex-direction: row;
}

#search-results .pagination {
  display: flex;
  flex-direction: row;
  align-items: center;
  margin-top: 32px;
}

#search-results button:focus {
  outline: none;
}

#search-results .pagination-item {
  color: rgba(0, 0, 0, 0.45);
}

#search-results .pagination-item.active {
  color: rgba(0, 0, 0, 0.70);
}


#search-results .next-item, #search-results .previous-item {
  color: #B3B3B3;
  cursor: default;
}

#search-results .next-item.active, #search-results .previous-item.active {
  color: #0D93F2;
  cursor: pointer;
}

#search-results .search-header h1 {
  font-size: 38px;
  color: rgba(0,0,0,0.85);
  letter-spacing: 0;
  text-align: left;
  line-height: 42.75px;
}

#search-results .search-header svg {
  fill: #8294A1;
}

#search-results .search-row {
  padding: 22px 32px;
  cursor: pointer;
}

#search-results .search-row.item:hover {
  background-color: #EDF5FA
}

#search-results .search-row.overflow:hover a {
  text-decoration: underline;
}

#search-results .search-row.item {
  border-bottom: 1px solid rgba(0,0,0,0.10);
}

#search-results .search-row.item h6 {
  font-size: 16px;
  margin: 0 0 10px;
  color: rgba(0,0,0,0.70);
  letter-spacing: 0;
  text-align: left;
}

#search-results .search-row.item p {
  font-size: 14px;
  margin: 0;
  color: rgba(0,0,0,0.45);
}

@media all and (max-width: 720px) {
  #search-results {
    padding: 0 24px;
  }

  #search-results .search-header {
    padding: 26px 32px;
  }

  #search-results .search-header h1 {
    font-size: 24px;
  }
}

@media all and (max-width: 500px) {
  #search-results {
    padding: 0;
  }
}

</style>
