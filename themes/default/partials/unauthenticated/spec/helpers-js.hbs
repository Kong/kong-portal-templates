{{!-- imports --}}
{{> unauthenticated/common-helpers-js }}

<script text="text/javascript">

if (!window.helpers) {
  window.helpers = {}
}

window.helpers.buildSidebar = (parsedSpec) => {
  // If specFile contains array of errors return early
  if (window.helpers.isObject(parsedSpec) === false || !parsedSpec.paths) return

  // Build object of sidebar data from the parsedSpec
  const acc = {} // Set up accumulator object
  Object.keys(parsedSpec.paths).forEach(path => {
    const operationPath = parsedSpec.paths[path]

    Object.keys(operationPath).forEach(method => {
      // If the parsedSpec does not have any tags group everything under default
      let tags = operationPath[method].tags ? operationPath[method].tags : ['default']
      tags.forEach(tag => {
        const operationTag = acc[tag] = acc[tag] || {}
        const operationMethod = operationTag[path] = operationTag[path] || {}
        const operationDetails = operationMethod[method] = operationMethod[method] || {}
        operationDetails.id = operationPath[method].operationId || Object.getOwnPropertyNames(operationMethod)[0] + '_' + buildSidebarURL(Object.getOwnPropertyNames(operationTag).slice(-1)[0])
        operationDetails.summary = operationPath[method].summary || operationPath[method].description || 'summary undefined'
      })
    })
  })

  // Transform acc object to an array and sort items to match rendered spec
  const sidebarArray =
    Object
      .keys(acc)
      .map(tag => {
        return {
          tag,
          paths: Object
            .keys(acc[tag])
            .map(path => {
              return {
                path,
                methods: Object
                  .keys(acc[tag][path])
                  .map(method => {
                    return {
                      method,
                      id: acc[tag][path][method].id,
                      summary: acc[tag][path][method].summary
                    }
                  })
              }
            })
        }
      })
      .sort((a, b) => window.helpers.sortAlphabetical(a.tag, b.tag))

  return sidebarArray
}

/*
 * Lookup spec file to render from data attribute on page
 */
window.helpers.retrieveParsedSpec = (name, spec) => {
  if (!spec) {
    throw new Error(`<p>Oops! Looks like we had trouble finding the spec: '${name}'</p>`)
  }

  const contents = spec.contents
  const parsedSpec = parseSpec(contents)

  // If parseSpec returns array of errors then map them to DOM
  if (window.helpers.isObject(parsedSpec) === false) {
    throw new Error(`<p>Oops! Something went wrong while parsing the spec: '${name}'</p>`)
  }
  return parsedSpec
}

window.helpers.addEvent = (parent, evt, selector, handler) => {
  parent.addEventListener(evt, function (event) {
    if (event.target.matches(selector + ', ' + selector + ' *')) {
      handler.apply(event.target.closest(selector), arguments)
    }
  }, false)
}

// Check if spec is json or yaml
function parseSpec (contents) {
  let parsedSpec // Set empty varible to hold spec
  let errorArray = [] // Set empty array to hold any errors

  // Try to parse spec as JSON
  // If parse fails push json error message into errors array
  try {
    parsedSpec = JSON.parse(contents)
  } catch (jsonError) {
    errorArray.push('Error trying to parse JSON:<br>' + jsonError)

    // Try to parse spec as YAML
    // If parse fails push yaml error message into errors array
    try {
      parsedSpec = YAML.load(contents)
    } catch (yamlError) {
      errorArray.push('Error trying to parse YAML:<br>' + yamlError)
    }
  }
  // If parsed is undefined return errors, else return the parsed spec file
  return parsedSpec
}

// Takes string (id) and replaces all instances of / , {} and -
// Characters to properly build URL for sidebar
function buildSidebarURL (string) {
  return string
    .replace(/\//, '')
    .replace(/({|})/g, '_')
    .replace(/\//g, '_')
    .replace(/-/, '_')
}

</script>
