{{!-- imports --}}
{{> search/helpers-js }}

{{!-- template --}}
<div id="search">
  <div @click="toggleActive" id="search-icon" :class="{ active: searchActive }">
    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24">
      <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
      <path d="M0 0h24v24H0z" fill="none"/>
    </svg>
  </div>
  <div id="search-window" :class="{ active: searchActive }">
    <div class="search-bar">
      <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24">
      <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
        <path d="M0 0h24v24H0z" fill="none"/>
      </svg>
      <input name="search"
        v-model="searchModel"
        @focus="toggleSearchFocus(true)"
        @blur="toggleSearchFocus(false)"
        placeholder="Search..."/>
    </div>
    <div class="search-item-container compact">
      <div class="search-row item"
        v-for="file in searchResults"
        @click="goToSearchResult(file.path)">
        <div class="item-inner">
          <p class="title">${ file.alias || file.title }</p>
          <p class="url">.../${ file.path }</p>
        </div>
      </div>
      <div class="search-row item" v-if="searchResults.length < 1 && searchModel !== ''">
        <div class="item-inner">
          <p>no results...</p>
        </div>
      </div>
      <div  @click="goToFullResults" class="search-row overflow" v-if="additionalResults > 0">
        <a>View ${ additionalResults } more results</a>
      </div>
    </div>
  </div>
</div>

{{!-- component --}}
<script>

window.registerApp(function () {
  new window.Vue({
    el: '#search',
    delimiters: ['${', '}'],

    data () {
      return {
        pageList: [],
        searchResults: [],
        additionalResults: 0,
        searchModel: '',
        searchActive: false,
        searchFocused: false,

        fetchPageList: () => { console.log('error: fetchPageList helper failed to load') },
        searchFiles: () => { console.log('error: searchFiles helper failed to load') },
        goToPage: () => { console.log('error: goToPage helper failed to load') },
        buildUrl: () => { console.log('error: buildUrl helper failed to load') },
        isValidKey: () => { console.log('error: isValidKey helper failed to load') }
      }
    },

    created () {
      // event listener allowing user to type to search without having searchbar selected
      window.addEventListener('keyup', (event) => {
        // on escape close search window
        if (event.which === 27 && this.searchActive) {
          this.toggleActive()

        // on enter close if text box empty & go to results page if not
        } else if (this.searchActive && event.which === 13) {
          this.searchModel === '' ? this.toggleActive() : this.goToFullResults()

        // on delete remove last character of input model
        } else if (this.searchActive && !this.searchFocused && event.which === 8) {
          this.searchModel = this.searchModel.slice(0, this.searchModel.length - 1)

        // if key is character/special character append key event to input model
        } else if (this.searchActive && !this.searchFocused && this.isValidKey(event.which)) {
          this.searchModel += event.key
        }
      })

      // event listener allowing which closes search when clicked out of
      window.addEventListener('click', (event) => {
        let searchWindowEl = window.document.getElementById('search-window')
        let searchToggleEl = window.document.getElementById('search-icon')
        let isSearchWindowClicked = searchWindowEl.contains(event.target)
        let isSearchToggleClicked = searchToggleEl.contains(event.target)

        if (this.searchActive && !isSearchToggleClicked && !isSearchWindowClicked) {
          this.toggleActive()
        }
      })
    },

    mounted () {
      if (window.helpers) {
        this.fetchPageList = window.helpers.fetchPageList || this.fetchPageList
        this.searchFiles = window.helpers.searchFiles || this.searchFiles
        this.goToPage = window.helpers.goToPage || this.goToPage
        this.buildUrl = window.helpers.buildUrl || this.buildUrl
        this.isValidKey = window.helpers.isValidKey || this.isValidKey
      }
      this.pageList = this.fetchPageList(window._kong.files)
    },

    methods: {
      goToFullResults () {
        let path = `search?query=${this.searchModel}`
        let url = this.buildUrl(path)
        this.goToPage(url)
      },

      goToSearchResult (path) {
        let url = this.buildUrl(path)
        this.goToPage(url)
      },

      toggleActive () {
        this.searchModel = ''
        this.searchActive = !this.searchActive
      },

      toggleSearchFocus (isFocused) {
        if (typeof isFocused === Boolean) {
          this.searchFocused = isFocused
          return
        }
        this.searchFocused = !this.searchFocused
      }
    },

    watch: {
      searchModel: {
        handler: function (searchModel, oldSearchModel) {
          let fullSearchResults = this.searchFiles(this.searchModel, this.pageList)
          this.searchResults = fullSearchResults.slice(0, 4)
          this.additionalResults = fullSearchResults.length - this.searchResults.length
        }
      }
    },

    beforeDestroy () {
      window.removeEventListener('keyup')
      window.removeEventListener('click')
    }
  })
})
</script>

{{!-- style --}}
<style>

#search {
  position: relative;
}

#search #search-icon {
  border-radius: 2px;
  cursor: pointer;
  height: 32px;
  width: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
}

#search #search-icon.active {
  background: rgba(0,0,0,0.30);
}

#search #search-icon svg {
  fill: #ffffff;
}

#search #search-window {
  position: absolute;
  max-width: 320px;
  padding: 0;
  border-radius: 3px;
  width: 320px;
  background-color: #ffffff;
  box-shadow: 0 2px 8px 0 rgba(0,0,0,0.24);
  left: -282px;
}

#search #search-window:not(.active) {
  display: none;
}

#search #search-window .search-bar {
  display: flex;
  flex-direction: row;
  align-items: center;
  margin: 0 24px;
}

#search #search-window .search-bar svg {
  fill: #8294A1;
  height: 18px;
  flex-grow: 1;
  flex-shrink: 0;
  display: flex;
}

#search #search-window input {
  text-align: left;
  flex-grow: 1;
  flex-shrink: 0;
  border: none;
  width: 100%;
  padding: 12px 0px 12px 8px;
  font-size: 16px;
  color: rgba(0,0,0,0.70);
  letter-spacing: 0;
}

#search #search-window input:focus {
  outline: none;
}

#search .search-header {
  width: 100%;
  border-bottom: 1px solid rgba(0,0,0,0.10);
  padding: 26px 32px;
  display: flex;
  align-content: center;
  align-items: center;
  justify-content: space-between;
}

#search .search-header h1 {
  font-size: 38px;
  color: rgba(0,0,0,0.85);
  letter-spacing: 0;
  text-align: left;
  line-height: 42.75px;
}

#search .search-row {
  cursor: pointer;
}

#search .search-row.item:hover {
  background-color: #EDF5FA
}

#search .search-row.overflow {
  margin: 0 24px;
  padding: 22px 0;
}

#search .search-row.overflow:hover a {
  text-decoration: underline;
}

#search .search-row .item-inner {
  border-bottom: 1px solid rgba(0,0,0,0.10);
  margin: 0 24px;
  padding: 22px 0;
}

#search .search-row:first-of-type .item-inner {
  border-top: 1px solid rgba(0,0,0,0.10);
}

#search .search-row.item .title {
  font-size: 16px;
  font-weight: 400px;
  text-decoration: none;
  margin: 0 0 10px;
  color: rgba(0,0,0,0.70);
  letter-spacing: 0;
  text-align: left;
}

#search .search-row.item p {
  font-size: 14px;
  margin: 0;
  color: rgba(0,0,0,0.45);
}

@media all and (max-width: 720px) {
  #search #search-window {
    position: fixed;
    width: 100%;
    max-width: 100%;
    border-radius: 0;
    right: 0;
    left: 0;
    top: 80px;
  }

  #search #search-window input {
    padding: 24px 0px 24px 8px;
  }
}
</style>
